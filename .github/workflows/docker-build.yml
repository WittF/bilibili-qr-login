name: Docker Build and Push

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'release.py'
    tags:
      - 'v*.*.*'

env:
  REGISTRY: docker.io
  IMAGE_NAME: bilibili-qr-login

jobs:
  # 准备构建信息
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
      short_sha: ${{ steps.version.outputs.short_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version info
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            VERSION=$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
          echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

  # 主构建任务（AMD64 + 多平台）
  build:
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      packages: write
    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      TRUST_ORIGIN: ${{ secrets.TRUST_ORIGIN }}
      WEBHOOK_IP: ${{ secrets.WEBHOOK_IP }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check build environment
        run: |
          if [[ "${{ env.DOCKER_PASSWORD }}" == "" ]]; then
            echo "⚠️ Docker secrets not available (likely Dependabot commit)"
            echo "📦 Will build image but skip Docker Hub push and webhook"
          else
            echo "✅ Docker secrets available, will build and push to Docker Hub"
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        if: env.DOCKER_PASSWORD != ''
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag 事件：版本号和 latest
            type=raw,value=latest,enable=${{ needs.prepare.outputs.is_release == 'true' }},priority=600
            type=raw,value=${{ needs.prepare.outputs.version }},enable=${{ needs.prepare.outputs.is_release == 'true' }},priority=700
            type=raw,value=v${{ needs.prepare.outputs.version }},enable=${{ needs.prepare.outputs.is_release == 'true' }},priority=700
            # Push 事件：dev 和 commit 标签  
            type=raw,value=dev,enable=${{ needs.prepare.outputs.is_release == 'false' }},priority=400
            type=raw,value=dev-${{ needs.prepare.outputs.short_sha }},enable=${{ needs.prepare.outputs.is_release == 'false' }},priority=500
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=哔哩哔哩登录工具
            org.opencontainers.image.version=${{ needs.prepare.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Determine platforms
        id: platforms
        run: |
          if [[ "${{ needs.prepare.outputs.is_release }}" == "true" ]]; then
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
            echo "Building multi-platform release"
          else
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT  
            echo "Building AMD64 only for development"
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: ${{ env.DOCKER_PASSWORD != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TRUST_ORIGIN=${{ env.TRUST_ORIGIN }}
            APP_VERSION=${{ needs.prepare.outputs.version }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        if: needs.prepare.outputs.is_release == 'true' && env.DOCKER_PASSWORD != ''
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md

      - name: Test webhook connectivity
        if: env.WEBHOOK_IP != ''
        run: |
          echo "Testing webhook connectivity to ${{ env.WEBHOOK_IP }}:9000"
          curl -f --connect-timeout 10 --max-time 30 \
            -H "User-Agent: GitHub-Actions-Test" \
            http://${{ env.WEBHOOK_IP }}:9000/health || echo "⚠️ Webhook endpoint not responding"

      - name: Wait before webhook
        if: env.WEBHOOK_IP != ''
        run: sleep 3

      - name: Trigger k3s pods update webhook
        if: env.WEBHOOK_IP != '' && env.DOCKER_PASSWORD != ''
        run: |
          # 设置镜像标签
          if [[ "${{ needs.prepare.outputs.is_release }}" == "true" ]]; then
            IMAGE_TAG="v${{ needs.prepare.outputs.version }}"
            DEPLOY_ENV="production"
          else
            IMAGE_TAG="dev-${{ needs.prepare.outputs.short_sha }}"
            DEPLOY_ENV="development"
          fi
          
          echo "Triggering webhook for $DEPLOY_ENV environment with tag: $IMAGE_TAG"
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions" \
            -d '{
              "repository": {
                "repo_name": "${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
              },
              "version": "${{ needs.prepare.outputs.version }}",
              "tag": "'$IMAGE_TAG'",
              "sha": "${{ github.sha }}",
              "environment": "'$DEPLOY_ENV'",
              "is_release": ${{ needs.prepare.outputs.is_release }},
              "commit_message": "${{ github.event.head_commit.message }}",
              "pusher": "${{ github.actor }}"
            }' \
            http://${{ env.WEBHOOK_IP }}:9000/hooks/docker-push || echo "Webhook failed, but continuing..."

  # 构建验证任务
  verify:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: always() && needs.build.result == 'success' && vars.DOCKER_USERNAME != ''
    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}

    steps:
      - name: Test Docker image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
          if [[ "${{ needs.prepare.outputs.is_release }}" == "true" ]]; then
            TAG="v${{ needs.prepare.outputs.version }}"
          else
            TAG="dev-${{ needs.prepare.outputs.short_sha }}"
          fi
          
          echo "Testing image: $IMAGE:$TAG"
          
          # 拉取并运行容器进行基本验证
          docker run --rm -d --name test-container -p 3001:3000 "$IMAGE:$TAG"
          sleep 10
          
          # 检查容器是否在运行
          if docker ps | grep -q test-container; then
            echo "✅ Container is running successfully"
            # 简单的健康检查
            if curl -f http://localhost:3001/ --connect-timeout 5; then
              echo "✅ Application is responding"
            else
              echo "⚠️  Application might not be fully ready yet"
            fi
          else
            echo "❌ Container failed to start"
            docker logs test-container
            exit 1
          fi
          
          # 清理
          docker stop test-container || true

  # 清理缓存任务（可选）
  cleanup:
    runs-on: ubuntu-latest
    needs: [prepare, build, verify]
    if: always() && needs.prepare.outputs.is_release == 'true'
    steps:
      - name: Clean up old caches
        run: |
          echo "Release completed, cache cleanup can be implemented here if needed"
          # 可以在这里添加清理旧的构建缓存的逻辑 