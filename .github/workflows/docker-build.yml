name: Docker Build and Push

on:
  repository_dispatch:
    types: [semantic-release]

env:
  REGISTRY: docker.io
  IMAGE_NAME: bilibili-qr-login

jobs:
  # 准备构建信息
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version info
        id: version
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🚀 正式版本发布: v$VERSION"

  # 构建和发布Docker镜像
  build-and-push:
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      packages: write
    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      TRUST_ORIGIN: ${{ secrets.TRUST_ORIGIN }}
      WEBHOOK_IP: ${{ secrets.WEBHOOK_IP }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,priority=900
            type=raw,value=v${{ needs.prepare.outputs.version }},priority=800
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=哔哩哔哩登录工具
            org.opencontainers.image.version=${{ needs.prepare.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Login to Docker Hub
        if: env.DOCKER_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push
        if: env.DOCKER_PASSWORD != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TRUST_ORIGIN=${{ env.TRUST_ORIGIN }}
            APP_VERSION=${{ needs.prepare.outputs.version }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        if: env.DOCKER_PASSWORD != ''
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md

      - name: Trigger deployment webhook
        if: env.WEBHOOK_IP != '' && env.DOCKER_PASSWORD != ''
        run: |
          echo "📡 触发生产环境部署 (镜像: v${{ needs.prepare.outputs.version }})"
          
          WEBHOOK_PAYLOAD=$(cat <<EOF
          {
            "repository": {
              "repo_name": "${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
            },
            "version": "${{ needs.prepare.outputs.version }}",
            "tag": "v${{ needs.prepare.outputs.version }}",
            "sha": "${{ github.sha }}",
            "environment": "production",
            "pusher": "${{ github.actor }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          )
          
          HTTP_STATUS=$(curl -s -o /tmp/webhook_response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d "$WEBHOOK_PAYLOAD" \
            --connect-timeout 10 \
            --max-time 30 \
            http://${{ env.WEBHOOK_IP }}:9000/hooks/docker-push)
          
          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
            echo "✅ 部署Webhook触发成功！"
          else
            echo "❌ 部署Webhook触发失败 (HTTP $HTTP_STATUS)"
          fi
          
          rm -f /tmp/webhook_response.json

      - name: Verify published image
        if: env.DOCKER_PASSWORD != '' && vars.DOCKER_USERNAME != ''
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
          echo "🧪 验证发布的镜像..."
          
          # 等待镜像传播
          sleep 10
          
          if docker pull "$IMAGE"; then
            echo "✅ 镜像验证成功"
            echo "🎉 版本 v${{ needs.prepare.outputs.version }} 发布完成！"
            echo "📦 可用标签: latest, v${{ needs.prepare.outputs.version }}"
          else
            echo "⚠️  镜像拉取失败，可能是传播延迟"
          fi 