name: Docker Build and Push

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'release.py'
    tags:
      - 'v*.*.*'

env:
  REGISTRY: docker.io
  IMAGE_NAME: bilibili-qr-login

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      TRUST_ORIGIN: ${{ secrets.TRUST_ORIGIN }}
      WEBHOOK_IP: ${{ secrets.WEBHOOK_IP }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag 事件：设置版本号和 latest
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}},priority=600,event=tag
            # Push 事件：设置 dev 和 commit 标签  
            type=raw,value=dev,enable={{is_default_branch}},event=push
            type=sha,prefix=commit-,format=short,event=push

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # 暂时只构建 amd64 平台以加快构建速度
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TRUST_ORIGIN=${{ env.TRUST_ORIGIN }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md

      - name: Wait before webhook
        if: startsWith(github.ref, 'refs/tags/v')
        run: sleep 3

      - name: Trigger k3s pods update webhook
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"repository": {"repo_name": "${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"}}' \
            http://${{ env.WEBHOOK_IP }}:9000/hooks/docker-push

  # 单独的 ARM64 构建任务（仅在发布时运行）
  build-arm64:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      TRUST_ORIGIN: ${{ secrets.TRUST_ORIGIN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Extract metadata for ARM64
        id: meta-arm64
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,suffix=-arm64

      - name: Build and push ARM64 Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta-arm64.outputs.tags }}
          labels: ${{ steps.meta-arm64.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TRUST_ORIGIN=${{ env.TRUST_ORIGIN }} 